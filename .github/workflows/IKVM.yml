name: IKVM

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - hotfix/*
    - develop
    - release/*
  pull_request:
    branches:
    - main
    - develop

jobs:
  build-openjdk:
    name: Build OpenJDK
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Cache OpenJDK Build
      uses: actions/cache@v3
      with:
        path: openjdk/build/linux-x86_64-normal-server-release
        key: openjdk-build-linux-x86_64-normal-server-release--${{ runner.os }}--${{ hashFiles('openjdk/**', '!openjdk/build') }}-8
    - name: Check OpenJDK Build Stamp
      id: openjdk-build-stamp
      uses: andstor/file-existence-action@v1
      with:
        files: openjdk/build/linux-x86_64-normal-server-release/stamp
    - name: Fetch OpenJDK 7
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      run: |
        mkdir -p openjdk/build && 
        curl -o openjdk/build/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz "https://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz" &&
        tar xzvf openjdk/build/openjdk-7u75-b13-linux-x64-18_dec_2014.tar.gz -C openjdk/build
    - name: Build OpenJDK
      if: steps.openjdk-build-stamp.outputs.files_exists != 'true'
      uses: docker://debian/eol:lenny
      with:
        args: >
          /bin/bash -c "
            echo 'deb http://archive.debian.org/debian/ lenny main' > /etc/apt/sources.list &&
            apt-get update &&
            apt-get install -y \
              build-essential \
              unzip \
              zip \
              curl \
              gcc-4.3 \
              g++-4.3 \
              libx11-dev \
              libxext-dev \
              libxrender-dev \
              libxtst-dev \
              libxt-dev \
              libxi-dev \
              libcups2-dev \
              libasound2-dev \
              libfreetype6-dev \
              libfontconfig1-dev &&
            cd openjdk &&
            JAVA_HOME=build/java-se-7u75-ri bash ./configure &&
            make DISABLE_HOTSPOT_OS_VERSION_CHECK=ok images &&
            touch build/linux-x86_64-normal-server-release/stamp"
    - name: Update OpenJDK Attributes
      run: |
        sudo chown -R `id -u`:`id -g` linux-x86_64-normal-server-release && \
        sudo chmod -R +rwx linux-x86_64-normal-server-release/images/j2sdk-image/bin
      working-directory: openjdk/build
    - name: Package OpenJDK
      run: |
        zip -r openjdk-build-linux-x86_64-normal-server-release.zip \
          linux-x86_64-normal-server-release/langtools/gensrc \
          linux-x86_64-normal-server-release/corba/gensrc \
          linux-x86_64-normal-server-release/jdk/gensrc \
          linux-x86_64-normal-server-release/jdk/impsrc \
          linux-x86_64-normal-server-release/jdk/lib \
          linux-x86_64-normal-server-release/jdk/classes \
          linux-x86_64-normal-server-release/images
      working-directory: openjdk/build
    - name: Upload OpenJDK
      uses: actions/upload-artifact@v3
      with:
        name: openjdk-build-linux-x86_64-normal-server-release
        path: openjdk/build/openjdk-build-linux-x86_64-normal-server-release.zip
    - name: Cache OpenJDK Test Harness Build
      uses: actions/cache@v3
      with:
        path: jtreg/build
        key: jtreg-build--${{ runner.os }}--${{ hashFiles('jtreg/**', 'openjdk/build/linux-x86_64-normal-server-release/images/j2sdk-image', '!jtreg/build') }}-6
    - name: Check OpenJDK Test Harness Build Stamp
      id: jtreg-build-stamp
      uses: andstor/file-existence-action@v1
      with:
        files: jtreg/build/stamp
    - name: Build OpenJDK Test Harness
      if: steps.jtreg-build-stamp.outputs.files_exists != 'true'
      run: bash make/build-all.sh `realpath ../openjdk/build/linux-x86_64-normal-server-release/images/j2sdk-image` && touch build/stamp
      working-directory: jtreg
    - name: Package OpenJDK Test Harness
      run: zip -r jtreg-build.zip build
      working-directory: jtreg
    - name: Upload OpenJDK Test Harness 
      uses: actions/upload-artifact@v3
      with:
        name: jtreg-build
        path: jtreg/jtreg-build.zip
  build-ikvm:
    name: Build IKVM
    needs:
    - build-openjdk
    timeout-minutes: 120
    runs-on: windows-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Move Temporary Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nTMP=${{ runner.temp }}`nTEMP=${{ runner.temp }}`nTMPDIR=${{ runner.temp }}"
    - name: Setup .NET
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=${{ runner.temp }}\dotnet"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Setup WSL
      uses: Vampire/setup-wsl@v1
      with:
        additional-packages:
          zlib1g-dev
          libmpc-dev
          libmpfr-dev
          libgmp-dev
          clang
          llvm
          llvm-dev
    - name: Move NuGet Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=${{ runner.temp }}\nuget\packages"
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ${{ runner.temp }}\nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('IKVM.sln', 'src\**\*.csproj', 'src\**\*.msbuildproj') }}
        restore-keys: ${{ runner.os }}-nuget-
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Download OpenJDK 8 Build
      uses: actions/download-artifact@v3
      with:
        name: openjdk-build-linux-x86_64-normal-server-release
        path: openjdk/build
    - name: Restore OpenJDK 8 Build
      shell: pwsh
      run: Expand-Archive openjdk-build-linux-x86_64-normal-server-release.zip .
      working-directory: openjdk/build
    - name: Download JTReg Build
      uses: actions/download-artifact@v3
      with:
        name: jtreg-build
        path: jtreg
    - name: Restore JTReg Build
      shell: pwsh
      run: Expand-Archive jtreg-build.zip .
      working-directory: jtreg
    - name: NuGet Restore
      run: dotnet restore IKVM.sln
    - name: Build Artifacts
      run: |
        msbuild /m /bl `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblySemVer} `
          /p:InformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          /p:RepositoryUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" `
          /p:PackageProjectUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}" `
          /p:BuildInParallel=true `
          /p:CreateHardLinksForAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=true `
          /p:CreateHardLinksForCopyLocalIfPossible=true `
          /p:CreateHardLinksForPublishFilesIfPossible=true `
          /p:ContinuousIntegrationBuild=true `
          IKVM.dist.msbuildproj
    - name: Upload MSBuild Log
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: msbuild.binlog
        path: msbuild.binlog
    - name: Package NuGet Packages
      run: tar czvf C:\nuget.tar.gz nuget
      working-directory: dist
    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: C:\nuget.tar.gz
    - name: Package Binaries
      run: tar czvf C:\bin.tar.gz bin
      working-directory: dist
    - name: Upload Binaries
      uses: actions/upload-artifact@v3
      with:
        name: bin
        path: C:\bin.tar.gz
    - name: Package Tools
      run: tar czvf C:\tools.tar.gz tools
      working-directory: dist
    - name: Upload Tools
      uses: actions/upload-artifact@v3
      with:
        name: tools
        path: C:\tools.tar.gz
    - name: Package Image
      run: tar czvf C:\image.tar.gz image
      working-directory: dist
    - name: Upload Image
      uses: actions/upload-artifact@v3
      with:
        name: image
        path: C:\image.tar.gz
    - name: Package Tests
      run: tar czvf C:\tests.tar.gz tests
      working-directory: dist
    - name: Upload Tests
      uses: actions/upload-artifact@v3
      with:
        name: tests
        path: C:\tests.tar.gz
    - name: Clean Solution
      run: |
        git reset --hard
        git clean -qfdx
  test:
    strategy:
      matrix:
        run:
        - IKVM.Tests
        - IKVM.Tests.JRE
        - IKVM.Tests.JDK
        - ikvmc.Tests
        - IKVM.Tools.Exporter.Tests
        - IKVM.Tools.Tests
        - IKVM.JTReg.TestAdapter.Tests
        - IKVM.OpenJDK.Tests?TestPartition=0
        - IKVM.OpenJDK.Tests?TestPartition=1
        - IKVM.OpenJDK.Tests?TestPartition=2
        - IKVM.OpenJDK.Tests?TestPartition=3
        - IKVM.OpenJDK.Tests?TestPartition=4
        - IKVM.OpenJDK.Tests?TestPartition=5
        - IKVM.OpenJDK.Tests?TestPartition=6
        - IKVM.OpenJDK.Tests?TestPartition=7
        tfm:
        - net461
        - netcoreapp3.1
        - net6.0
        sys:
        - windows
        - linux
        exclude:
        - tfm: net461
          sys: linux
        - run: IKVM.Tools.Exporter.Tests
          tfm: net6.0
        - run: ikvmc.Tests
          tfm: net6.0
        - run: IKVM.OpenJDK.Tests?TestPartition=0
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=1
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=2
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=3
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=4
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=5
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=6
          sys: linux
        - run: IKVM.OpenJDK.Tests?TestPartition=7
          sys: linux
        include:
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: net472
          sys: windows
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: netcoreapp3.1
          sys: windows
        - run: IKVM.MSBuild.Tasks.Tests
          tfm: net6.0
          sys: windows
        - run: IKVM.MSBuild.Tests
          tfm: net6.0
          sys: windows
        - run: IKVM.NET.Sdk.Tests
          tfm: net6.0
          sys: windows
    name: Test (${{ matrix.run }}:${{ matrix.tfm }}:${{ matrix.sys }}
    needs:
    - build-ikvm
    timeout-minutes: 240
    runs-on: ${{ fromJSON('{"windows":["windows-2022"],"linux":["ubuntu-22.04"]}')[matrix.sys] }}
    steps:
    - name: Setup .NET
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=${{ runner.temp }}/dotnet"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 7.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Setup WSL
      if: matrix.sys == 'windows'
      uses: Vampire/setup-wsl@v1
    - name: Move Temporary Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nTMP=${{ runner.temp }}`nTEMP=${{ runner.temp }}`nTMPDIR=${{ runner.temp }}"
    - name: Download Tests
      uses: actions/download-artifact@v3
      with:
        name: tests
        path: dist
    - name: Restore Tests
      run: tar xzvf tests.tar.gz
      working-directory: dist
    - name: Delete Tests
      shell: pwsh
      run: ri tests.tar.gz
      working-directory: dist
    - name: Execute Tests
      timeout-minutes: 120
      shell: pwsh
      run: |
        # assign powershell variables
        $run = "${{ matrix.run }}"
        $tfm = "${{ matrix.tfm }}"
        $sys = "${{ matrix.sys }}"

        # suite name can contain filter expression after ?
        $split = $run.IndexOf("?")
        if ($split -gt -1) {
            $tst = $run.Substring(0, $split)
            $qry = $run.Substring($split + 1)
        } else {
            $tst = $run
        }

        # scan for test assemblies
        $tests = $(gci .\dist\tests\$tst\$tfm -Recurse -Filter '*.Tests.dll')

        # if a query was specified, add to test command
        if ($tests) {
            if ($qry -ne "" -and $qry -ne $null) {
                Add-Content $env:GITHUB_ENV "`nRET=TestResults--$tst-$qry--$tfm--$sys"
                dotnet test -f $tfm --blame -v 2 --results-directory "TestResults" --logger:"console;verbosity=detailed" --logger:trx --collect "Code Coverage" --filter "$qry" $tests
            } else {
                Add-Content $env:GITHUB_ENV "`nRET=TestResults--$tst--$tfm--$sys"
                dotnet test -f $tfm --blame -v 2 --results-directory "TestResults" --logger:"console;verbosity=detailed" --logger:trx --collect "Code Coverage" $tests
            }
        }
    - name: Upload Test Results
      if: always() && startsWith(env.RET, 'TestResults--')
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RET }}
        path: TestResults
  release:
    name: Release
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')
    needs:
    - test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      id: GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: dist
    - name: Restore NuGet Packages
      run: tar xzvf nuget.tar.gz
      working-directory: dist
    - name: Download Binaries
      uses: actions/download-artifact@v3
      with:
        name: bin
        path: dist
    - name: Restore Binaries
      run: tar xzvf bin.tar.gz
      working-directory: dist
    - name: Compress Binaries
      shell: pwsh
      run: cd dist && gi bin/* | %{ $tfm = $_.Name; Push-Location "bin/$tfm"; zip -r "../IKVM-${env:GitVersion_SemVer}-bin-$tfm.zip" .; Pop-Location }
    - name: Download Tools
      uses: actions/download-artifact@v3
      with:
        name: tools
        path: dist
    - name: Restore Tools
      run: tar xzvf tools.tar.gz
      working-directory: dist
    - name: Compress Tools
      shell: pwsh
      run: cd dist && gi tools/*/* | %{ $tfm = $_.Parent.Name; $rid = $_.Name; Push-Location "tools/$tfm/$rid"; zip -r "../../IKVM-${env:GitVersion_SemVer}-tools-$tfm-$rid.zip" .; Pop-Location }
    - name: Download Image
      uses: actions/download-artifact@v3
      with:
        name: image
        path: dist
    - name: Restore Image
      run: tar xzvf image.tar.gz
      working-directory: dist
    - name: Compress Image
      shell: pwsh
      run: cd dist && gi image/*/* | %{ $tfm = $_.Parent.Name; $rid = $_.Name; Push-Location "image/$tfm/$rid"; zip -r "../../IKVM-${env:GitVersion_SemVer}-image-$tfm-$rid.zip" .; Pop-Location }